diff --git a/tron_service.py b/tron_service.py
index 6d1ef2a..b21d7f8 100644
--- a/tron_service.py
+++ b/tron_service.py
@@
-import os, math, time, base64, logging, tempfile, requests, qrcode, base58, ecdsa, hashlib, asyncio
+import os, math, time, base64, logging, tempfile, requests, qrcode, base58, ecdsa, hashlib, asyncio
@@
 HEADERS      = {"TRON-PRO-API-KEY": config.TRON_API_KEY} if config.TRON_API_KEY else {}
 
+# ────────────────────────────────────────────────────────────────
+# helper: единая обёртка над requests.post
+# ────────────────────────────────────────────────────────────────
+def tron_post(url: str, *,
+              json: Optional[dict] = None,
+              timeout: int = 10,
+              retries: int = 3) -> dict:
+    """
+    Выполняет POST к TronGrid c автоматическими повторами.
+    Возвращает dict (пустой при неуспехе) – чтобы вызывающий код не падал.
+    """
+    for attempt in range(1, retries + 1):
+        try:
+            resp = requests.post(url, json=json, headers=HEADERS, timeout=timeout)
+            if resp.status_code == 200:
+                return resp.json()
+            log.warning(f"tron_post {url} HTTP {resp.status_code}")
+        except Exception as e:
+            log.warning(f"tron_post {url} fail {attempt}/{retries}: {e}")
+        time.sleep(0.4 * attempt)          # back-off
+    return {}
+
@@
-    r = requests.post(f"{TRONGRID_API}/wallet/triggerconstantcontract",
-                      json=payload, headers=HEADERS, timeout=10).json()
+    r = tron_post(f"{TRONGRID_API}/wallet/triggerconstantcontract", json=payload)
@@
-        resp = requests.post(
-            f"{TRONGRID_API}/wallet/getaccount",
-            json={"address": addr_b58, "visible": True},
-            headers=HEADERS,
-            timeout=10
-        )
-        acc = resp.json()
+        acc = tron_post(f"{TRONGRID_API}/wallet/getaccount",
+                        json={"address": addr_b58, "visible": True})
@@
-    txo = requests.post(f"{TRONGRID_API}/wallet/triggersmartcontract",
-                        json={
+    txo = tron_post(f"{TRONGRID_API}/wallet/triggersmartcontract", json={
@@
-    br = requests.post(f"{TRONGRID_API}/wallet/broadcasttransaction",
-                       json=signed, headers=HEADERS, timeout=10).json()
+    br = tron_post(f"{TRONGRID_API}/wallet/broadcasttransaction", json=signed)
@@
-    create = requests.post(f"{TRONGRID_API}/wallet/createtransaction",
-                           json={
+    create = tron_post(f"{TRONGRID_API}/wallet/createtransaction", json={
@@
-    br = requests.post(f"{TRONGRID_API}/wallet/broadcasttransaction",
-                       json=signed, headers=HEADERS, timeout=10).json()
+    br = tron_post(f"{TRONGRID_API}/wallet/broadcasttransaction", json=signed)
@@
-    create = requests.post(f"{TRONGRID_API}/wallet/createtransaction",
-        json={
+    create = tron_post(f"{TRONGRID_API}/wallet/createtransaction", json={
@@
-    br = requests.post(f"{TRONGRID_API}/wallet/broadcasttransaction",
-        json=signed, headers=HEADERS, timeout=10).json()
+    br = tron_post(f"{TRONGRID_API}/wallet/broadcasttransaction", json=signed)
@@
-    tx = requests.post(f"{TRONGRID_API}/wallet/createtransaction",
-        json={
+    tx = tron_post(f"{TRONGRID_API}/wallet/createtransaction", json={
@@
-    br = requests.post(f"{TRONGRID_API}/wallet/broadcasttransaction",
-        json=signed, headers=HEADERS, timeout=10).json()
+    br = tron_post(f"{TRONGRID_API}/wallet/broadcasttransaction", json=signed)
@@
-    txo = requests.post(f"{TRONGRID_API}/wallet/triggersmartcontract",
-                        json={
+    txo = tron_post(f"{TRONGRID_API}/wallet/triggersmartcontract", json={
@@
-    br = requests.post(f"{TRONGRID_API}/wallet/broadcasttransaction",
-                       json=signed, headers=HEADERS, timeout=10).json()
+    br = tron_post(f"{TRONGRID_API}/wallet/broadcasttransaction", json=signed)
@@
-        send_txid = send_trx_to_deposit(master_priv, master_addr, dep_addr, trx_needed)
+        send_txid = send_trx_to_deposit(master_priv, master_addr, dep_addr, trx_needed)
         if not send_txid:
@@
-        txid = safe_usdt_transfer(master_priv, master_addr, dep_priv, dep_addr, usdt)
+        txid = await safe_usdt_transfer(master_priv, master_addr, dep_priv, dep_addr, usdt)
@@
-def safe_usdt_transfer(master_priv: str, master_addr: str,
+async def safe_usdt_transfer(master_priv: str, master_addr: str,
                        dep_priv: str, dep_addr: str,
                        amount: float) -> Optional[str]:
@@
-        log.warning("⌛ Ожидание 5 сек — возможно, ресурсы ещё не активировались")
-        await asyncio.sleep(5)
+        log.warning("⌛ Ожидание 5 сек — возможно, ресурсы ещё не активировались")
+        await asyncio.sleep(5)
