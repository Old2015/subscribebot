import time
from datetime import datetime, timedelta, timezone
import logging
import os

from aiogram import Router, types
import config
import supabase_client
from tron_service import create_qr_code, generate_ephemeral_address

subscription_router = Router()
log = logging.getLogger(__name__)

# Anti-spam: –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ 30 —Å–µ–∫
RESTART_COOLDOWN = 30                        # —Å–µ–∫
_last_restart: dict[int, float] = {}         # tg_id ‚Üí timestamp


# –¢—Ä–∏ –∫–Ω–æ–ø–∫–∏ (Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
main_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [
            types.KeyboardButton(text="–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"),
            types.KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        ],
        [
            types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        ]
    ],
    resize_keyboard=True
)

@subscription_router.message(lambda msg: msg.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def cmd_restart(message: types.Message):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.
    1) unban (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω)
    2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ trial_end > now –∏–ª–∏ subscription_end > now
    3) –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É (24 —á, member_limit=1)
    """
    telegram_id = message.from_user.id          # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
    log.info("User %s pressed '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'", telegram_id)

    now_ts = time.time()
    if now_ts - _last_restart.get(telegram_id, 0) < RESTART_COOLDOWN:
        await message.answer(
            "–°—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ üôÇ",
            reply_markup=main_menu
        )
        return
    _last_restart[telegram_id] = now_ts



    # unban
    try:
        await config.bot.unban_chat_member(
            chat_id=config.PRIVATE_GROUP_ID,
            user_id=telegram_id,
            only_if_banned=False
        )
        log.info(f"User {telegram_id} unbanned successfully")
    except Exception as e:
        log.warning(f"Failed to unban user {telegram_id}. Possibly not banned? {e}")

    user = supabase_client.get_user_by_telegram_id(telegram_id)
    if not user:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start ",
            reply_markup=main_menu
        )
        return

    now = datetime.now()
    trial_end = user.get("trial_end")
    sub_start = user.get("subscription_start")
    sub_end = user.get("subscription_end")

    has_access = False

    # –ü—Ä–æ–≤–µ—Ä–∏–º trial
    if trial_end and trial_end > now:
        has_access = True

    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–ø–∏—Å–∫—É
    if sub_end and sub_end > now:
        if sub_start:
            if sub_start <= now:
                has_access = True
        else:
            has_access = True

    if not has_access:
        await message.answer(
            "–£ –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (–ü–µ—Ä–∏–æ–¥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç—ë–∫ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞).",
            reply_markup=main_menu
        )
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É, —Å—Ä–æ–∫ 24 —á
    expire_timestamp = int(time.time()) + 24 * 3600
    try:
        invite_link = await config.bot.create_chat_invite_link(
            chat_id=config.PRIVATE_GROUP_ID,
            name="Single-Use Link",
            member_limit=1,
            expire_date=expire_timestamp
        )
        text = (
            "–í–∞—à–∞ –Ω–æ–≤–∞—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É (–¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á, –æ–¥–∏–Ω –≤—Ö–æ–¥):\n"
            f"{invite_link.invite_link}\n\n"
            "–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –µ—â—ë –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞, –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª."
        )
        await message.answer(text, reply_markup=main_menu)
    except Exception as e:
        log.error(f"Failed to create single-use invite link for user {telegram_id}: {e}")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=main_menu
        )


@subscription_router.message(lambda msg: msg.text == "–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")
async def cmd_status(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –≤ –æ–¥–Ω–æ–º —Å—Ç–∏–ª–µ —Å –ø–ª–∞—Ç—ë–∂–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º:
      ‚îÄ –±–∞–∑–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Å—Ç—É–ø–∞
      ‚îÄ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –±–ª–æ–∫ ¬´–í —Ç–æ–º —á–∏—Å–ª–µ ‚Ä¶¬ª –ø—Ä–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–Ω–∏
    """
    log.info("User %s pressed '–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏'", message.from_user.id)

    user = supabase_client.get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.",
            reply_markup=main_menu,
        )
        return

    # --- –¥–∞—Ç—ã –∏–∑ –ë–î --------------------------------------------------------
    trial_end = user.get("trial_end")              # datetime | None
    sub_start = user.get("subscription_start")
    sub_end   = user.get("subscription_end")

    # –ø—Ä–∏–≤–æ–¥–∏–º naive ‚Üí UTC-aware, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å
    def as_utc(dt):
        if dt is None:
            return None
        return dt if dt.tzinfo else dt.replace(tzinfo=timezone.utc)

    trial_end = as_utc(trial_end)
    sub_start = as_utc(sub_start)
    sub_end   = as_utc(sub_end)

    # --- —Ä–∞—Å—á—ë—Ç –±–∞–∑–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ --------------------------------
    now_utc   = datetime.now(timezone.utc)
    local_tz  = datetime.now().astimezone().tzinfo

    # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –∫–æ–Ω–µ—Ü = sub_end; –∏–Ω–∞—á–µ –µ—Å–ª–∏ —Ç—Ä–∏–∞–ª –∞–∫—Ç–∏–≤–µ–Ω ‚Äî trial_end
    if sub_end and sub_end > now_utc:
        access_end = sub_end
    elif trial_end and trial_end > now_utc:
        access_end = trial_end
    else:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.\n–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚Üí ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=main_menu,
        )
        return

    today_str = datetime.now(local_tz).strftime("%d.%m.%Y")
    end_str   = access_end.astimezone(local_tz).strftime("%d.%m.%Y")

    lines = [
        "‚ÑπÔ∏è *–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞ –∫ TradingGroup*",
        f"–î–æ—Å—Ç—É–ø –∫ TradingGroup —Ä–∞–∑—Ä–µ—à—ë–Ω\n—Å {today_str} –ø–æ {end_str}.",
    ]

    # --- –¥–æ–ø. –±–ª–æ–∫, –µ—Å–ª–∏ —Ç—Ä–∏–∞–ª –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è --------------------------
    if trial_end and trial_end > now_utc:
        trial_end_str = trial_end.astimezone(local_tz).strftime("%d.%m.%Y")
        trial_days    = (trial_end.date() - now_utc.date()).days

        paid_start = max(trial_end, now_utc)        # –Ω–∞—á–∞–ª–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏
        paid_start_str = paid_start.astimezone(local_tz).strftime("%d.%m.%Y")
        paid_days      = (sub_end.date() - paid_start.date()).days if sub_end else 0
        paid_end_str   = sub_end.astimezone(local_tz).strftime("%d.%m.%Y") if sub_end else end_str

        lines.append(
            "\n–í —Ç–æ–º —á–∏—Å–ª–µ:"
            f"\n‚Ä¢ —Å {today_str} –ø–æ {trial_end_str} ‚Äî {trial_days} –¥–Ω. —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."
            f"\n‚Ä¢ —Å {paid_start_str} –ø–æ {paid_end_str} ‚Äî {paid_days} –¥–Ω. –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
        )

    await message.answer("\n".join(lines), parse_mode="Markdown", reply_markup=main_menu)



@subscription_router.message(lambda msg: msg.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def cmd_subscribe(message: types.Message):
    """
    1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–¥–∞–≤–∞–ª–∏ –ª–∏ –∞–¥—Ä–µ—Å <24 —á –Ω–∞–∑–∞–¥
    2) –ï—Å–ª–∏ –º–æ–∂–Ω–æ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º HD-–∞–¥—Ä–µ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 4 —Å–æ–æ–±—â–µ–Ω–∏—è:
       (1) –§–æ—Ç–æ (QR) + "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏..."
       (2) –ê–¥—Ä–µ—Å –æ—Ç–¥–µ–ª—å–Ω–æ
       (3) "–≠—Ç–æ—Ç –∞–¥—Ä–µ—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞..."
       (4) "–í–Ω–∏–º–∞–Ω–∏–µ: —Ç–æ–ª—å–∫–æ —Å–µ—Ç—å TRC20!"
    """
    telegram_id = message.from_user.id
    log.info(f"User {telegram_id} pressed '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'")

    user = supabase_client.get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=main_menu
        )
        return

    deposit_address     = user.get("deposit_address")
    deposit_created_at  = user.get("deposit_created_at")        # –º–æ–∂–µ—Ç –±—ã—Ç—å aware –∏–ª–∏ naive

    if deposit_address and deposit_created_at:
        # --- –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∞–π–º-–∑–æ–Ω—ã -------------------------------------------
        created_utc = (
            deposit_created_at
            if deposit_created_at.tzinfo
            else deposit_created_at.replace(tzinfo=timezone.utc)
        )
        now_utc = datetime.now(timezone.utc)

        # --- —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ / –æ—Å—Ç–∞–ª–æ—Å—å ------------------------------
        diff_seconds      = (now_utc - created_utc).total_seconds()
        if diff_seconds < 24 * 3600:
            remaining_sec = 24 * 3600 - diff_seconds
            hours_left    = int(remaining_sec // 3600)   # –∏–ª–∏ math.ceil(‚Ä¶ / 3600)

            await message.answer(
                "–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –±—ã–ª –≤—ã–¥–∞–Ω –º–µ–Ω–µ–µ 24—á –Ω–∞–∑–∞–¥.\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {hours_left}—á, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π.\n"
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{deposit_address}",
                reply_markup=main_menu,
            )
            return

    # 24 —á –ø—Ä–æ—à–ª–∏ ‚Äî –∞–¥—Ä–µ—Å –æ–±–Ω—É–ª—è–µ–º
        supabase_client.reset_deposit_address_and_privkey(user["id"])

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å—á—ë—Ç—á–∏–∫):
    # new_index = supabase_client.increment_deposit_index(user["id"])
    # tron_data = generate_ephemeral_address(index=new_index)
    # –ò–ª–∏ –±–µ–∑ —Å—á—ë—Ç—á–∏–∫–∞:
    tron_data = generate_ephemeral_address(user['id'])   # –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ index
    address = tron_data["address"]
    if not address:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Tron-–∞–¥—Ä–µ—Å. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.",
            reply_markup=main_menu
        )
        return

   

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR
    qr_path = create_qr_code(address)
    usdt_amount = config.SUBSCRIPTION_PRICE_USDT

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º 4 —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_intro = (
        f"–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π –æ–ø–ª–∞—Ç–∏—Ç–µ {usdt_amount} USDT (TRC20) –Ω–∞ –∞–¥—Ä–µ—Å:"
    )
    msg_address = f"`{address}`"  # —É–¥–æ–±–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
    msg_after = (
        "–≠—Ç–æ—Ç –∞–¥—Ä–µ—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É."
    )
    msg_network = (
        "–í–Ω–∏–º–∞–Ω–∏–µ: –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è **—Ç–æ–ª—å–∫–æ** –≤ —Å–µ—Ç–∏ TRC20.\n"
        "–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Å–µ—Ç–∏, —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã!"
    )

    if qr_path and os.path.exists(qr_path):
        # 1) QR + intro
        try:
            await message.answer_photo(
                photo=types.FSInputFile(qr_path),
                caption=msg_intro,
                parse_mode="Markdown",
                reply_markup=main_menu
            )
            # 2) –ê–¥—Ä–µ—Å –æ—Ç–¥–µ–ª—å–Ω–æ
            await message.answer(msg_address, parse_mode="Markdown")
            # 3) –£—Å–ª–æ–≤–∏—è
            await message.answer(msg_after)
            # 4) –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–µ—Ç–∏
            await message.answer(msg_network, parse_mode="Markdown")

        except Exception as e:
            log.error(f"Error sending QR photo: {e}")
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Ä–∞–∑–±–∏–≤–∫—É –±–µ–∑ —Ñ–æ—Ç–æ
            await message.answer(msg_intro, reply_markup=main_menu)
            await message.answer(msg_address, parse_mode="Markdown")
            await message.answer(msg_after)
            await message.answer(msg_network, parse_mode="Markdown")
    else:
        # –ë–µ–∑ QR
        await message.answer(msg_intro, reply_markup=main_menu)
        await message.answer(msg_address, parse_mode="Markdown")
        await message.answer("(–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR)\n" + msg_after)
        await message.answer(msg_network, parse_mode="Markdown")