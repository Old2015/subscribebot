import time                                          # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
from datetime import datetime, timedelta, timezone, date  # —Ä–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏
import logging                                       # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import os

from aiogram import Router, types                    # –æ–±—ä–µ–∫—Ç—ã aiogram
import config                                        # –∫–æ–Ω—Ñ–∏–≥
import supabase_client                               # —Ä–∞–±–æ—Ç–∞ —Å –ë–î
from tron_service import create_qr_code, generate_ephemeral_address
from tron_service import create_join_request_link



subscription_router = Router()                   # —Ä–æ—É—Ç–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
log = logging.getLogger(__name__)                # –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è

# Anti-spam: –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ 30 —Å–µ–∫
RESTART_COOLDOWN = 30                        # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
_last_restart: dict[int, float] = {}         # tg_id ‚Üí timestamp


# –¢—Ä–∏ –∫–Ω–æ–ø–∫–∏ (Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
main_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [
            types.KeyboardButton(text="Subscription status"),
            types.KeyboardButton(text="Purchase subscription"),
        ],
        [
            types.KeyboardButton(text="Start over")
        ]
    ],
    resize_keyboard=True
)

@subscription_router.message(lambda msg: msg.text == "Start over")
async def cmd_restart(message: types.Message):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.
    1) unban (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω)
    2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ trial_end > now –∏–ª–∏ subscription_end > now
    3) –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É (24 —á, member_limit=1)
    """
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
    telegram_id = message.from_user.id          # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
    log.info("User %s pressed 'Start over'", telegram_id)

    now_ts = time.time()
    if now_ts - _last_restart.get(telegram_id, 0) < RESTART_COOLDOWN:
        await message.answer(
            "Waiting 30 seconds. "
            "Please wait a moment üôÇ",
            reply_markup=main_menu
        )
        return
    _last_restart[telegram_id] = now_ts



    # unban
    try:
        await config.bot.unban_chat_member(
            chat_id=config.PRIVATE_GROUP_ID,
            user_id=telegram_id,
            only_if_banned=False
        )
        log.info(f"User {telegram_id} unbanned successfully")
    except Exception as e:
        log.warning(f"Failed to unban user {telegram_id}. Possibly not banned? {e}")

    user = supabase_client.get_user_by_telegram_id(telegram_id)
    if not user:
        await message.answer(
            "You are not registered. Tap /start ",
            reply_markup=main_menu
        )
        return

    now = datetime.now()
    trial_end = user.get("trial_end")
    sub_start = user.get("subscription_start")
    sub_end = user.get("subscription_end")

    has_access = False

    # –ü—Ä–æ–≤–µ—Ä–∏–º trial
    if trial_end and trial_end > now:
        has_access = True

    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–ø–∏—Å–∫—É
    if sub_end and sub_end > now:
        if sub_start:
            if sub_start <= now:
                has_access = True
        else:
            has_access = True

    if not has_access:
        await message.answer(
            "You currently have no access (your free trial has expired or no subscription is active). You can purchase a new subscription. For technical questions, please contact the administrator @gwen12309",
            reply_markup=main_menu
        )
        return

 # --- –≤—ã–¥–∞—ë–º / –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º join-request —Å—Å—ã–ª–∫—É ----------------------
    try:
        # 1) —Å–Ω–∏–º–∞–µ–º –±–∞–Ω (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        await config.bot.unban_chat_member(
            chat_id=config.PRIVATE_GROUP_ID,
            user_id=telegram_id,
            only_if_banned=True
        )


        # 2) –µ—Å–ª–∏ –≤ –ë–î —É–∂–µ –µ—Å—Ç—å –Ω–µ-–ø—Ä–æ—Ç—É—Ö—à–∞—è ‚Äì –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º
 

        old_link, old_exp = supabase_client.get_invite(user["id"])

        def _as_utc(dt):
            if dt is None:
                return None
            return dt if dt.tzinfo else dt.replace(tzinfo=timezone.utc)

        old_exp = _as_utc(old_exp)             # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º tz

        if old_link and old_exp and old_exp > datetime.now(timezone.utc):
            join_link = old_link
        else:
            join_link = await create_join_request_link(
                bot=config.make_bot(),
                chat_id=config.PRIVATE_GROUP_ID,
                title="Restart join-request",
            )
            expires_at = datetime.now(timezone.utc) + timedelta(hours=24)
            supabase_client.upsert_invite(user["id"], join_link, expires_at)


        # 4) –æ—Ç–¥–∞—ë–º –∫–Ω–æ–ø–∫—É
        btn = types.InlineKeyboardButton(text="Join the group", url=join_link)
        kb  = types.InlineKeyboardMarkup(inline_keyboard=[[btn]])
        await message.answer(
            "Tap the button below and confirm your request‚Äîthe bot will approve it automatically.",
            reply_markup=kb
        )


    except Exception as e:
        log.error("restart join-link error for %s: %s", telegram_id, e)
        await message.answer(
            "üö´ Unable to generate a link. Please try again later or contact the administrator @gwen12309.",
            reply_markup=main_menu
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ¬´–°–¢–ê–¢–£–° –ü–û–î–ü–ò–°–ö–ò¬ª
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@subscription_router.message(lambda msg: msg.text == "Subscription status")
async def cmd_status(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞. –õ–æ–≥–∏–∫–∞:
      ‚Ä¢ –û–±—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω = min( trial_start | sub_start ) ‚Ä¶ max( trial_end | sub_end )
      ‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏ = trial_start ‚Ä¶ trial_end            (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å)
      ‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏     = max(sub_start, trial_end+1) ‚Ä¶ sub_end
    """
    log.info("User %s pressed 'Subscription status'", message.from_user.id)

    user = supabase_client.get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer(
            "You are not registered. Tap ¬´Start over¬ª .",
            reply_markup=main_menu,
        )
        return

    # ------------------------------ –Ω–∞—á–∞–ª–æ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ -----------------

    # ---------- [1] –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç ----------
    def as_utc(dt):
        if dt is None:
            return None
        return dt if dt.tzinfo else dt.replace(tzinfo=timezone.utc)

    trial_start = as_utc(user.get("trial_start"))
    trial_end   = as_utc(user.get("trial_end"))
    sub_start   = as_utc(user.get("subscription_start"))
    sub_end     = as_utc(user.get("subscription_end"))


    now_utc  = datetime.now(timezone.utc)
    local_tz = datetime.now().astimezone().tzinfo

    # ‚îÄ‚îÄ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ now_utc / local_tz
    def days_inclusive(d1: date, d2: date) -> int:
        """–†–∞–∑–Ω–∏—Ü–∞ –¥–∞—Ç —Å —É—á—ë—Ç–æ–º –æ–±–µ–∏—Ö –≥—Ä–∞–Ω–∏—Ü (19-21 = 3)."""
        return (d2 - d1).days + 1

    # ---------- [2] –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç—É–ø–∞ ----------
    if sub_end and sub_end > now_utc:
        # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª —Ç–µ—Å—Ç ‚Äì —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥–æ—Å—Ç—É–ø –Ω–∞—á–∞–ª—Å—è –µ—â—ë —Å –Ω–µ–≥–æ
        if trial_start:
            access_start = trial_start
        else:
            access_start = sub_start or now_utc
        access_end = sub_end
    elif trial_end and trial_end > now_utc:
        access_start = trial_start or now_utc
        access_end   = trial_end
    else:
        await message.answer(
            "You currently have no active access.\n"
            "To join the group, tap ‚Üí ¬´Purchase subscription¬ª."
            "For technical questions, please contact @gwen12309",
            reply_markup=main_menu,
        )
        return

    access_start_str = access_start.astimezone(local_tz).strftime("%d.%m.%Y")
    access_end_str   = access_end.astimezone(local_tz).strftime("%d.%m.%Y")

    lines = [
        "‚ÑπÔ∏è *HiddenEdge Trader‚Äôs Group access status*",
        f"Access is granted from  {access_start_str} to {access_end_str}."
    ]

    details_exist = False            # –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å —Ä–∞–∑–¥–µ–ª ‚Äú–í —Ç–æ–º —á–∏—Å–ª–µ:‚Äù

    # -------------------------------------------------------------------------
    # 1) –ë–ï–°–ü–õ–ê–¢–ù–´–ô –¢–ï–°–¢: –µ—Å–ª–∏ —Ç—Ä–∏–∞–ª –∞–∫—Ç–∏–≤–µ–Ω
    # -------------------------------------------------------------------------
    trial_start_eff = trial_start or access_start

    if trial_end and trial_end > now_utc:
        trial_start_l = trial_start_eff.astimezone(local_tz)
        trial_end_l   = trial_end.astimezone(local_tz)
        trial_days = days_inclusive(trial_start_eff.date(), trial_end.date())
        lines.append("\nIncluding:")
        details_exist = True
        lines.append(
          f"‚Ä¢ from {trial_start_l:%d.%m.%Y} to {trial_end_l:%d.%m.%Y} ‚Äî {trial_days}-day free trial"
        )

    # -------------------------------------------------------------------------
    # 2) –û–ü–õ–ê–ß–ï–ù–ù–ê–Ø –ü–û–î–ü–ò–°–ö–ê
    # -------------------------------------------------------------------------
    if sub_end and sub_end > now_utc:
        # –µ—Å–ª–∏ —Ç–µ—Å—Ç –µ—â—ë –∏–¥—ë—Ç ‚Üí –ø–ª–∞—Ç–Ω–∞—è —á–∞—Å—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 1 –¥–µ–Ω—å –ø–æ–∑–∂–µ trial_end
        if trial_end and trial_end > now_utc:
            paid_start = trial_end + timedelta(days=1)
        else:
            paid_start = sub_start or now_utc          # fallback

        paid_start_str = paid_start.astimezone(local_tz).strftime("%d.%m.%Y")
        paid_days = days_inclusive(paid_start.date(), sub_end.date())


        if not details_exist:
            lines.append("\nIncluding:")
        lines.append(
            f"‚Ä¢ from {paid_start_str} to {access_end_str} ‚Äî {paid_days} day paid subscription"
        )
# ------------------------------ –∫–æ–Ω–µ—Ü –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ ------------------
    await message.answer(
        "\n".join(lines),
        parse_mode="Markdown",
        reply_markup=main_menu,
    )



@subscription_router.message(lambda msg: msg.text == "Purchase subscription")
async def cmd_subscribe(message: types.Message):
    """
    1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–¥–∞–≤–∞–ª–∏ –ª–∏ –∞–¥—Ä–µ—Å <24 —á –Ω–∞–∑–∞–¥
    2) –ï—Å–ª–∏ –º–æ–∂–Ω–æ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º HD-–∞–¥—Ä–µ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 4 —Å–æ–æ–±—â–µ–Ω–∏—è:
       (1) –§–æ—Ç–æ (QR) + "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏..."
       (2) –ê–¥—Ä–µ—Å –æ—Ç–¥–µ–ª—å–Ω–æ
       (3) "–≠—Ç–æ—Ç –∞–¥—Ä–µ—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞..."
       (4) "–í–Ω–∏–º–∞–Ω–∏–µ: —Ç–æ–ª—å–∫–æ —Å–µ—Ç—å TRC20!"
    """
    telegram_id = message.from_user.id
    log.info(f"User {telegram_id} pressed 'Purchase subscription'")

    user = supabase_client.get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer(
            "You are not registered. Tap /start .",
            reply_markup=main_menu
        )
        return

    deposit_address     = user.get("deposit_address")
    deposit_created_at  = user.get("deposit_created_at")        # –º–æ–∂–µ—Ç –±—ã—Ç—å aware –∏–ª–∏ naive

    if deposit_address and deposit_created_at:
        # --- –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∞–π–º-–∑–æ–Ω—ã -------------------------------------------
        created_utc = (
            deposit_created_at
            if deposit_created_at.tzinfo
            else deposit_created_at.replace(tzinfo=timezone.utc)
        )
        now_utc = datetime.now(timezone.utc)

        # --- —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ / –æ—Å—Ç–∞–ª–æ—Å—å ------------------------------
        diff_seconds      = (now_utc - created_utc).total_seconds()
        if diff_seconds < 24 * 3600:
            remaining_sec = 24 * 3600 - diff_seconds
            hours_left    = int(remaining_sec // 3600)   # –∏–ª–∏ math.ceil(‚Ä¶ / 3600)

            await message.answer(
                "A payment address was issued less than 24 hours ago.\n"
                f"Approximately {hours_left}h remain before you can request a new one.\n"
                f"Your current payment address:\n{deposit_address}",
                reply_markup=main_menu,
            )
            return
    # 24 —á –ø—Ä–æ—à–ª–∏ ‚Äî –∞–¥—Ä–µ—Å –æ–±–Ω—É–ª—è–µ–º
        supabase_client.reset_deposit_address_and_privkey(user["id"])

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å—á—ë—Ç—á–∏–∫):
    # new_index = supabase_client.increment_deposit_index(user["id"])
    # tron_data = generate_ephemeral_address(index=new_index)
    # –ò–ª–∏ –±–µ–∑ —Å—á—ë—Ç—á–∏–∫–∞:
    tron_data = generate_ephemeral_address(user['id'])   # –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ index
    address = tron_data["address"]
    if not address:
        await message.answer(
            "Error: failed to generate a Tron address. Please contact the administrator @gwen12309",
            reply_markup=main_menu
        )
        return

   

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR
    qr_path = create_qr_code(address)
    usdt_amount = config.SUBSCRIPTION_PRICE_USDT

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º 4 —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_intro = (
        f"To purchase a 30-day subscription, please send {usdt_amount} USDT (TRC20) to the address below:"
    )
    msg_address = f"`{address}`"  # easy to copy
    msg_after = (
        "This address is valid for 24 hours. After payment, the bot will automatically confirm your subscription and activate (or extend) your group access within 20 minutes."
    )
    msg_network = (
        "Attention: payments are accepted **only** on the TRC20 network.\n"
        "If you send funds via another network, they will not be credited! For technical questions, contact the administrator @gwen12309."
    )

    if qr_path and os.path.exists(qr_path):
        # 1) QR + intro
        try:
            await message.answer_photo(
                photo=types.FSInputFile(qr_path),
                caption=msg_intro,
                parse_mode="Markdown",
                reply_markup=main_menu
            )
            # 2) –ê–¥—Ä–µ—Å –æ—Ç–¥–µ–ª—å–Ω–æ
            await message.answer(msg_address, parse_mode="Markdown")
            # 3) –£—Å–ª–æ–≤–∏—è
            await message.answer(msg_after)
            # 4) –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–µ—Ç–∏
            await message.answer(msg_network, parse_mode="Markdown")

        except Exception as e:
            log.error(f"Error sending QR photo: {e}")
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Ä–∞–∑–±–∏–≤–∫—É –±–µ–∑ —Ñ–æ—Ç–æ
            await message.answer(msg_intro, reply_markup=main_menu)
            await message.answer(msg_address, parse_mode="Markdown")
            await message.answer(msg_after)
            await message.answer(msg_network, parse_mode="Markdown")
    else:
        # –ë–µ–∑ QR
        await message.answer(msg_intro, reply_markup=main_menu)
        await message.answer(msg_address, parse_mode="Markdown")
        await message.answer("(Failed to generate a QR code)\n" + msg_after)
        await message.answer(msg_network, parse_mode="Markdown")

